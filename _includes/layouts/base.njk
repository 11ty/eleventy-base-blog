<!doctype html>
<html lang="{{ metadata.language }}">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>{{ title or metadata.title }}</title>
		<meta name="description" content="{{ description or metadata.description }}">

		{#- Atom and JSON feeds included by default #}
		<link rel="alternate" href="/feed/feed.xml" type="application/atom+xml" title="{{ metadata.title }}">
		<link rel="alternate" href="/feed/feed.json" type="application/json" title="{{ metadata.title }}">

		{#- Add the contents of a file to the bundle #}
		{%- css %}
		{% include "public/css/index.css" %}
		{% endcss %}
		{%- js %}
		{% include "public/js/dark-toggle.js" %}
		{% endjs %}

		{#- Render the CSS bundle using Inlined CSS (for the fastest site performance in production) #}
		<style>
			{% getBundle "css" %}
		</style>

		{#- Renders the CSS bundle using a separate file, if you can't set CSP directive style-src: 'unsafe-inline' #}
		{#- <link rel="stylesheet" href="{% getBundleFileUrl "css" %}"> #}
	</head>
	<body>
		<a href="#skip" class="visually-hidden">Skip to main content</a>
		<div class="content-wrapper">
			<header class="side-header">
				{#- Read more about `eleventy-navigation` at https://www.11ty.dev/docs/plugins/navigation/ #}
				<nav>
					<h2 class="visually-hidden">Top level navigation menu</h2>
					<div class="talk-bubble" >
						<div id="chatBubble" class="nav-phrase" data-original-content="{% if navPhrase and itemList %}{{ navPhrase | replace("{}", itemList | trim) | safe }}{% else %}Welcome{% endif %}">
							{% if navPhrase %}
								{% set navItems = collections.all | eleventyNavigation %}
								{% set filteredItems = [] %}
								{% for item in navItems %}
									{% if item.url != page.url %}
										{% set filteredItems = (filteredItems.push(item), filteredItems) %}
									{% endif %}
								{% endfor %}
								{% set itemList %}
								{% for item in filteredItems %}
									<a href="{{ item.url }}">{{ item.title | lower }}</a>
									{% if not loop.last %}
										{% if loop.revindex0 == 1 %} or {% else %},{% endif %}
									{% endif %}
								{% endfor %}
								{% endset %}
								<span>{{ navPhrase | replace("{}", itemList | trim) | safe }}</span>
							{% endif %}
						</div>
						<form method="post"  id="theme-form" class="nav-toggle">
							<input type="checkbox" id="dark-mode-toggle" name="theme" value="dark" aria-label="Toggle dark mode">
							<label for="dark-mode-toggle"></label>
						</form>
					</div>
					<div class="side-nav">
						<ul class="nav-list">
							{%- for entry in collections.all | eleventyNavigation %}
								<li class="nav-item">
									<a href="{{ entry.url }}"{% if entry.url == page.url %} aria-current="page"{% endif %}>{{ entry.title }}</a>
								</li>
							{%- endfor %}
						</ul>
					</div>
				</nav>

				{# <div class="wave-divider"></div> #}
			</header>

			<main id="skip" class="container">
				{{ content | safe }}
			</main>
		</div>
		<footer></footer>

		<!-- This page `{{ page.url | htmlBaseUrl }}` was built on {% currentBuildDate %} -->
	</body>
</html>
<script defer>
	{% getBundle "js" %}
</script>
<script>
	const chatBubble = document.getElementById('chatBubble');
	const originalContent = chatBubble.dataset.originalContent;
	let isInputMode = false;

	chatBubble.addEventListener('click', function () {
		if (!isInputMode) {
			isInputMode = true;
			chatBubble.innerHTML = '<input type="text" id="chatInput" placeholder="Type your message...">';
			document
				.getElementById('chatInput')
				.focus();
		}
	});

	document.addEventListener('keypress', function (e) {
		if (e.key === 'Enter' && isInputMode) {
			const input = document.getElementById('chatInput');
			const message = input.value;
			if (message) {
				chatBubble.innerHTML = 'Processing...';
				sendMessageToWorker(message);
			}
		}
	});

	function sendMessageToWorker(message) {
		chatBubble.textContent = '';
		const eventSource = new EventSource(`/?talk=${encodeURIComponent(message)}`);

		eventSource.onmessage = (event) => {
			const data = event.data;
			if (data !== '[DONE]') {
				try {
					const parsed = JSON.parse(data);
					if (parsed.response) {
						chatBubble.textContent += parsed.response;
					}
				} catch (error) {
					console.error('Error parsing JSON:', error);
					chatBubble.textContent += data;
				}
			} else {
				eventSource.close();
				isInputMode = false;
			}
		};

		eventSource.onerror = (error) => {
			console.error('EventSource failed:', error);
			eventSource.close();
			isInputMode = false;
			if (!chatBubble.textContent) {
				chatBubble.textContent = originalContent;
			}
		};
	}
</script>